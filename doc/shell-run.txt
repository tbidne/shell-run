-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A utility program for running shell commands asynchronously.
--   
--   Please see the README at
--   <a>https://github.com/tbidne/shell-run/#readme</a>
@package shell-run
@version 0.1.0.0


-- | Provides the <a>MonadLogger</a> class, used for having pretty logs in
--   a monadic setting. Logging via this class includes both textual
--   prefixes (e.g. <tt>[INFO]</tt>, <tt>[ERROR]</tt>) and also common
--   terminal control prefixes for colors.
module ShellRun.Class.MonadLogger

-- | <a>MonadLogger</a> is a simple typeclass for abstracting logging
--   functions.
class Monad m => MonadLogger m
logNoLine :: MonadLogger m => Text -> m ()
logLine :: MonadLogger m => Text -> m ()

-- | Determines the logging level.
data LogLevel
Debug :: LogLevel
Info :: LogLevel
InfoBlue :: LogLevel
InfoCyan :: LogLevel
InfoSuccess :: LogLevel
Warn :: LogLevel
Error :: LogLevel
Fatal :: LogLevel

-- | Determines the logging newline behavior.
data LogMode
Line :: LogMode
NoLine :: LogMode

-- | This is the most general way to log, includes options for
--   <a>LogLevel</a> and <a>LogMode</a>.
logLevelMode :: MonadLogger m => LogLevel -> LogMode -> Text -> m ()

-- | Debug formatted <a>logLine</a>.
logDebug :: MonadLogger m => Text -> m ()

-- | Info formatted <a>logLine</a>.
logInfo :: MonadLogger m => Text -> m ()

-- | Blue Info formatted <a>logLine</a>.
logInfoBlue :: MonadLogger m => Text -> m ()

-- | Cyan Info formatted <a>logLine</a>.
logInfoCyan :: MonadLogger m => Text -> m ()

-- | Success Info formatted <a>logLine</a>.
logInfoSuccess :: MonadLogger m => Text -> m ()

-- | Warn formatted <a>logLine</a>.
logWarn :: MonadLogger m => Text -> m ()

-- | Error formatted <a>logLine</a>.
logError :: MonadLogger m => Text -> m ()

-- | Fatal formatted <a>logLine</a>.
logFatal :: MonadLogger m => Text -> m ()

-- | Resets the carriage return.
resetCR :: MonadLogger m => m ()

-- | Clears 80 characters on the given line, then prints a newline.
clearLine :: MonadLogger m => m ()

-- | Clears the current line without starting a new one.
clearNoLine :: MonadLogger m => m ()
instance GHC.Show.Show ShellRun.Class.MonadLogger.LogLevel
instance ShellRun.Class.MonadLogger.MonadLogger GHC.Types.IO
instance ShellRun.Class.MonadLogger.MonadLogger m => ShellRun.Class.MonadLogger.MonadLogger (Control.Monad.Trans.Reader.ReaderT e m)


-- | Provides the <a>NonNegative</a> type for safe mathematical operations.
module ShellRun.Math.NonNegative

-- | Newtype wrapper over <a>Int</a>.
data NonNegative

-- | Unwraps the <a>NonNegative</a>
getNonNegative :: NonNegative -> Int

-- | Smart constructor for <a>NonNegative</a>.
mkNonNegative :: Int -> Maybe NonNegative

-- | Unsafe constructor for <a>NonNegative</a>, intended to be used with
--   known constants, e.g., <tt>unsafeNonNegative 7</tt>. Exercise
--   restraint!
unsafeNonNegative :: Int -> NonNegative

-- | Convenience function for getting the <a>Text</a> representation of the
--   underlying <a>Int</a>.
prettyPrint :: NonNegative -> Text
instance GHC.Show.Show ShellRun.Math.NonNegative.NonNegative
instance GHC.Classes.Ord ShellRun.Math.NonNegative.NonNegative
instance GHC.Classes.Eq ShellRun.Math.NonNegative.NonNegative


-- | Provides the <a>Positive</a> type for safe mathematical operations.
module ShellRun.Math.Positive

-- | Newtype wrapper over <a>Int</a>.
data Positive

-- | Unwraps the <a>Positive</a>
getPositive :: Positive -> Int

-- | Smart constructor for <a>Positive</a>.
mkPositive :: Int -> Maybe Positive

-- | Unsafe constructor for <a>Positive</a>, intended to be used with known
--   constants, e.g., <tt>unsafePositive 7</tt>. Exercise restraint!
unsafePositive :: Int -> Positive
instance GHC.Show.Show ShellRun.Math.Positive.Positive
instance GHC.Classes.Ord ShellRun.Math.Positive.Positive
instance GHC.Classes.Eq ShellRun.Math.Positive.Positive


-- | Provides the <a>RAdd</a> typeclass for safe addition.
module ShellRun.Math.RAdd

-- | The <a>RAdd</a> typeclass provides addition. The intention is to be
--   used with newtype'd numbers that carry some sort of invariant, e.g.,
--   <a>NonNegative</a>. This way we can safely add numbers without losing
--   their invariants.
class RAdd a b where {
    type family Sum a b;
}
(+:+) :: RAdd a b => a -> b -> Sum a b
infixl 6 +:+
instance ShellRun.Math.RAdd.RAdd ShellRun.Math.NonNegative.NonNegative ShellRun.Math.NonNegative.NonNegative
instance ShellRun.Math.RAdd.RAdd ShellRun.Math.NonNegative.NonNegative ShellRun.Math.Positive.Positive
instance ShellRun.Math.RAdd.RAdd ShellRun.Math.Positive.Positive ShellRun.Math.NonNegative.NonNegative
instance ShellRun.Math.RAdd.RAdd ShellRun.Math.Positive.Positive ShellRun.Math.Positive.Positive


-- | Provides the <a>REquals</a> class.
module ShellRun.Math.REquals

-- | <a>REquals</a> is used for convenience when we would like to compare
--   different types for equality. This makes sense when both types are
--   wrappers over the same type. Because <a>Eq</a> should be favored
--   whenever possible, no instances for <tt>REquals a a</tt> are provided.
class REquals a b
(=:=) :: REquals a b => a -> b -> Bool
instance ShellRun.Math.REquals.REquals ShellRun.Math.NonNegative.NonNegative GHC.Types.Int
instance ShellRun.Math.REquals.REquals GHC.Types.Int ShellRun.Math.NonNegative.NonNegative
instance ShellRun.Math.REquals.REquals ShellRun.Math.Positive.Positive GHC.Types.Int
instance ShellRun.Math.REquals.REquals GHC.Types.Int ShellRun.Math.Positive.Positive
instance ShellRun.Math.REquals.REquals ShellRun.Math.NonNegative.NonNegative ShellRun.Math.Positive.Positive
instance ShellRun.Math.REquals.REquals ShellRun.Math.Positive.Positive ShellRun.Math.NonNegative.NonNegative


-- | Re-exports <tt>Math</tt> modules.
module ShellRun.Math


-- | Provides the <a>Command</a> wrapper for commands.
module ShellRun.Types.Command

-- | Newtype wrapper for shell commands.
newtype Command
MkCommand :: Text -> Command
[getCommand] :: Command -> Text
instance GHC.Base.Monoid ShellRun.Types.Command.Command
instance GHC.Base.Semigroup ShellRun.Types.Command.Command
instance GHC.Show.Show ShellRun.Types.Command.Command
instance GHC.Classes.Eq ShellRun.Types.Command.Command


-- | Provides the <a>NativeLog</a> type.
module ShellRun.Types.Env.NativeLog

-- | Type for determining if we stream commands' logs.
data NativeLog
None :: NativeLog
Stdout :: NativeLog
instance GHC.Show.Show ShellRun.Types.Env.NativeLog.NativeLog


-- | Provides <tt>HasX</tt> style typeclasses for environment values.
module ShellRun.Class.Has

-- | Path to legend file.
class HasLegend env
getLegend :: HasLegend env => env -> Maybe Text

-- | Timeout, if any.
class HasTimeout env
getTimeout :: HasTimeout env => env -> Maybe NonNegative

-- | Determines if we should log commands' output.
class HasNativeLog env
getNativeLog :: HasNativeLog env => env -> NativeLog

-- | The commands themselves.
class HasCommands env
getCommands :: HasCommands env => env -> [Text]


-- | Provides core <a>Env</a> types.
module ShellRun.Types.Env

-- | The main <a>Env</a> type used by Shell Run. Intended to be used with
--   <tt>MonadReader</tt>.
data Env
MkEnv :: Maybe Text -> Maybe NonNegative -> NativeLog -> [Text] -> Env
[legend] :: Env -> Maybe Text
[timeout] :: Env -> Maybe NonNegative
[nativeLog] :: Env -> NativeLog
[commands] :: Env -> [Text]

-- | Type for determining if we stream commands' logs.
data NativeLog
None :: NativeLog
Stdout :: NativeLog

-- | Constructs a default <a>Env</a>.
defaultEnv :: Env
instance GHC.Show.Show ShellRun.Types.Env.Env
instance ShellRun.Class.Has.HasLegend ShellRun.Types.Env.Env
instance ShellRun.Class.Has.HasTimeout ShellRun.Types.Env.Env
instance ShellRun.Class.Has.HasNativeLog ShellRun.Types.Env.Env
instance ShellRun.Class.Has.HasCommands ShellRun.Types.Env.Env


-- | Parses command line args into the core <a>Env</a> type used by the
--   main application.
module ShellRun.Parsing.Env

-- | Runs the parser.
runParser :: IO Env


-- | Provides convenience wrappers over <a>Text</a>.
module ShellRun.Types.IO

-- | Newtype wrapper for stdout.
newtype Stdout
MkStdout :: Text -> Stdout
[getStdout] :: Stdout -> Text

-- | Newtype wrapper for stderr.
newtype Stderr
MkStderr :: Text -> Stderr
[getStderr] :: Stderr -> Text


-- | Provides types for the legend functionality.
module ShellRun.Types.Legend

-- | Various errors that can occur while processing the legend.
data LegendErr

-- | Errors relating to locating the legend file itself.
FileErr :: Text -> LegendErr

-- | Errors relating to legend key=val format.
EntryErr :: Text -> LegendErr

-- | Errors relating to cyclic keys.
CyclicKeyErr :: Text -> LegendErr

-- | Errors relating to duplicate keys.
DuplicateKeyErr :: Text -> LegendErr

-- | Alias for our legend map.
type LegendMap = Map Text Text
instance GHC.Show.Show ShellRun.Types.Legend.LegendErr
instance GHC.Classes.Eq ShellRun.Types.Legend.LegendErr


-- | Provides the <a>MonadShell</a> typeclass.
module ShellRun.Class.MonadShell

-- | The core typeclass for <tt>ShellRun</tt>.
class Monad m => MonadShell m

-- | Given a filepath, attempts to read and parse the file into a
--   <a>LegendMap</a>.
legendPathToMap :: MonadShell m => Text -> m (Either LegendErr LegendMap)

-- | Runs commands.
runCommands :: MonadShell m => [Command] -> m ()


-- | Internal module for utilities.
module ShellRun.Utils.Internal

-- | For &lt;math&gt;, returns non-negative &lt;math&gt; such that
--   
--   &lt;math&gt;
divWithRem :: NonNegative -> Positive -> (NonNegative, NonNegative)

-- | Convenience function for mapping <tt>(a -&gt; b)</tt> over a
--   monomorphic bifunctor.
monoBimap :: Bifunctor p => (a -> b) -> p a a -> p b b

-- | Represents a relative time.
data TimeSummary
MkTimeSummary :: NonNegative -> NonNegative -> NonNegative -> NonNegative -> TimeSummary
[days] :: TimeSummary -> NonNegative
[hours] :: TimeSummary -> NonNegative
[minutes] :: TimeSummary -> NonNegative
[seconds] :: TimeSummary -> NonNegative

-- | Transforms <a>NonNegative</a> <tt>seconds</tt> into a
--   <a>TimeSummary</a>.
secondsToTimeSummary :: NonNegative -> TimeSummary

-- | Formats a <a>TimeSummary</a> to <a>Text</a>.
formatTimeSummary :: TimeSummary -> Text
instance GHC.Show.Show ShellRun.Utils.Internal.TimeSummary


-- | Provides <a>Text</a> utils.
module ShellRun.Utils.Text

-- | Newtype wrapper for non-empty <a>Text</a>.
data NonEmptyText

-- | Unwraps the <a>NonEmptyText</a>
unNonEmptyText :: NonEmptyText -> Text

-- | Smart constructor for <a>NonEmptyText</a>.
mkNonEmptyText :: Text -> Maybe NonEmptyText

-- | Unsafe constructor for <a>NonEmptyText</a>, intended to be used with
--   know constants, e.g., <tt>unsafeMkNonEmptyText "hi"</tt>. Exercise
--   restraint!
unsafeMkNonEmptyText :: Text -> NonEmptyText

-- | Wrapper for <a>Text</a>'s <a>breakOn</a> that differs in two ways:
--   
--   <ol>
--   <li>Total, since we restrict the <tt>needle</tt> to
--   <a>NonEmptyText</a> (<a>Text</a> throws a pure exception here).</li>
--   <li>If the <tt>needle</tt> is found within the <tt>haystack</tt>, we
--   do not include it in the second part of the pair.</li>
--   </ol>
--   
--   For instance,
--   
--   <pre>
--   -- Data.Text
--   breakOn "=" "HEY=LISTEN" === ("HEY","=LISTEN")
--   
--   -- ShellRun.Utils.Text
--   breakStripPoint (unsafeMkNonEmptyText "=") "HEY=LISTEN" === ("HEY", "LISTEN")
--   </pre>
breakStripPoint :: NonEmptyText -> Text -> (Text, Text)
instance GHC.Show.Show ShellRun.Utils.Text.NonEmptyText
instance GHC.Base.Semigroup ShellRun.Utils.Text.NonEmptyText
instance GHC.Classes.Ord ShellRun.Utils.Text.NonEmptyText
instance GHC.Classes.Eq ShellRun.Utils.Text.NonEmptyText


-- | Provides utilities.
module ShellRun.Utils

-- | For given &lt;math&gt;, returns the absolute difference &lt;math&gt;.
diffTime :: TimeSpec -> TimeSpec -> NonNegative

-- | For &lt;math&gt; seconds, returns a <a>Text</a> description of the
--   days, hours, minutes and seconds.
formatTime :: NonNegative -> Text

-- | Safe <tt>head</tt>.
headMaybe :: [a] -> Maybe a

-- | Convenience function for mapping <tt>(a -&gt; b)</tt> over a
--   monomorphic bifunctor.
monoBimap :: Bifunctor p => (a -> b) -> p a a -> p b b

-- | For <tt>m (Maybe b)</tt>, <tt>m a</tt>, runs <tt>m a</tt> until <tt>m
--   (Maybe b)</tt> is a <tt>Just x</tt>. Returns <tt>pure x</tt> once this
--   is true.
whileNothing :: Monad m => m (Maybe b) -> m a -> m b

-- | For &lt;math&gt;, returns non-negative &lt;math&gt; such that
--   
--   &lt;math&gt;
divWithRem :: NonNegative -> Positive -> (NonNegative, NonNegative)


-- | Provides functionality for translating <a>Text</a> commands via a
--   <a>LegendMap</a>.
module ShellRun.Parsing.Commands

-- | Returns a list of <a>Text</a> commands, potentially transforming a
--   given string via the <a>LegendMap</a> <tt>legend</tt>.
--   
--   Given a command string <i>s</i>, we first check if <i>s</i> exists as
--   a key in <tt>legend</tt>. If it does not, we return <i>s</i>. If there
--   is a key matching <i>s</i>, i.e.,
--   
--   <pre>
--   legend = fromList [...,(s, v),...]
--   </pre>
--   
--   where &lt;math&gt;, then we recursively search on each &lt;math&gt;.
--   We stop and return &lt;math&gt; when it does not exist as a key in the
--   map.
--   
--   For example,
--   
--   <pre>
--   m = { "cmd1": "one", "cmd2": "two", "all": "cmd1,,cmd2,,other" }
--   translateCommands m ["all", "blah"] == ["one", "two", "other", "blah"]
--   </pre>
--   
--   Note: If -- when looking up a line -- we detect a cycle, then a
--   <a>CyclicKeyErr</a> will be returned.
translateCommands :: LegendMap -> [Text] -> Either LegendErr [Command]


-- | Provides the low-level <a>IO</a> functions for running shell commands.
module ShellRun.IO

-- | Returns the result of running a shell command given by <a>Text</a> on
--   <a>FilePath</a>.
sh :: Command -> Maybe FilePath -> IO Text

-- | Version of <a>sh</a> that ignores the return value.
sh_ :: Command -> Maybe FilePath -> IO ()

-- | Version of <a>sh</a> that returns (<a>ExitCode</a>, <a>Stdout</a>,
--   <a>Stderr</a>)
shExitCode :: Command -> Maybe FilePath -> IO (ExitCode, Stdout, Stderr)

-- | Version of <a>shExitCode</a> that returns <a>Left</a> <a>Stderr</a> if
--   there is a failure, <a>Right</a> <a>Stdout</a> otherwise.
tryShExitCode :: Command -> Maybe FilePath -> IO (Either Stderr Stdout)

-- | Version of <a>tryShExitCode</a> that also returns the command's
--   duration. <a>Stdout</a> is not returned on success.
tryTimeSh :: Command -> Maybe FilePath -> IO (Either (NonNegative, Stderr) NonNegative)

-- | Version of <a>tryTimeSh</a> that attempts to stream the command's
--   <tt>stdout</tt> to its <tt>stdout</tt>. Naturally, this is heavily
--   dependent on the command's flushing behavior.
tryTimeShWithStdout :: Command -> Maybe FilePath -> IO (Either (NonNegative, Stderr) NonNegative)


-- | This module provides the <a>runCommands</a> function used for running
--   a list of commands asynchronously.
module ShellRun.Async

-- | Runs all commands asynchronously while printing out a running counter.
--   When a command finishes/crashes, stdout is updated with the result. If
--   a haskell exception is encountered in <tt>ShellRun</tt> <i>itself</i>,
--   this is considered a fatal error and all threads are killed.
runCommands :: (HasNativeLog env, HasTimeout env, MonadIO m, MonadLogger m, MonadUnliftIO m, MonadReader env m) => [Command] -> m ()


-- | Internal module for parsing <a>Text</a> lines into a <a>LegendMap</a>.
module ShellRun.Parsing.Legend.Internal

-- | Attempts to parse the given [<a>Text</a>] into <a>LegendMap</a>. The
--   text lines can either be comments (start with <tt>#</tt>) or key value
--   pairs. The pairs have the form:
--   
--   <pre>
--   key=val
--   </pre>
--   
--   Parsing can fail if, for any non-comment line:
--   
--   <ul>
--   <li>Key is empty.</li>
--   <li>Value is empty.</li>
--   <li>There are duplicate keys.</li>
--   </ul>
linesToMap :: [Text] -> Either LegendErr LegendMap


-- | Provides parsing a legend file into a <a>LegendMap</a>.
module ShellRun.Parsing.Legend

-- | Given a filepath, attempts to parse the file's contents into a
--   <a>LegendMap</a>. If the file does not exist or the parsing fails (see
--   <a>linesToMap</a>), an error will be returned.
legendPathToMap :: Text -> IO (Either LegendErr LegendMap)


-- | This module is the entry point to the <tt>ShellRun</tt> library used
--   by the <tt>ShellRun</tt> executable.
module ShellRun

-- | <a>ShellT</a> is the main application type that runs shell commands.
newtype ShellT e m a
MkShellT :: ReaderT e m a -> ShellT e m a
[runShellT] :: ShellT e m a -> ReaderT e m a

-- | <a>runShell</a> is the entry point for running shell commands, i.e.,
--   <a>MonadShell</a> instances.
runShell :: (HasCommands env, HasLegend env, MonadReader env m, MonadLogger m, MonadShell m) => m ()
instance Control.Monad.IO.Unlift.MonadUnliftIO m => Control.Monad.IO.Unlift.MonadUnliftIO (ShellRun.ShellT e m)
instance Control.Monad.Trans.Class.MonadTrans (ShellRun.ShellT e)
instance ShellRun.Class.MonadLogger.MonadLogger m => ShellRun.Class.MonadLogger.MonadLogger (ShellRun.ShellT e m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (ShellRun.ShellT e m)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader e (ShellRun.ShellT e m)
instance GHC.Base.Monad m => GHC.Base.Monad (ShellRun.ShellT e m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (ShellRun.ShellT e m)
instance GHC.Base.Functor m => GHC.Base.Functor (ShellRun.ShellT e m)
instance (Control.Monad.IO.Class.MonadIO m, ShellRun.Class.MonadLogger.MonadLogger m, Control.Monad.IO.Unlift.MonadUnliftIO m) => ShellRun.Class.MonadShell.MonadShell (ShellRun.ShellT ShellRun.Types.Env.Env m)
